# -*- coding: utf8 -*-
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import random
import time
import requests
from pathlib import Path
from keyboards import *
from date_validator import *
from word_validator import *
from answers import *
from adress_validator import *
from sqlite_req import main
from popularity_sights import most_popular_sights

''' will
1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–±–æ—Ä–æ–∫ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–∏—Å—Ö–æ–¥—è –∏–∑ –ª–∞–π–∫–æ–≤ –≤ REACTIONS) -> (?) –û—Ç–¥–µ–ª—å–Ω–∞—è reply-–∫–Ω–æ–ø–∫–∞ –≤ /FIND
2. –°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ /FIND -> –û—Ç–¥–µ–ª—å–Ω–∞—è reply-–∫–Ω–æ–ø–∫–∞ –≤ /FIND ‚úÖ
3. –°–¥–µ–ª–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏-–æ–±–Ω–æ–≤–ª—è—é—â–∏–µ—Å—è –ª–∞–π–∫ –∏ –¥–∏–∑–ª–∞–π–∫ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏
'''

# main("CREATE TABLE Sights (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `area` TEXT, `year` INTEGER, `season` TEXT, `month` TEXT, `description` TEXT, `feedback` TEXT, `mark` INTEGER, `tags` TEXT, `date` TEXT, `userid` INTEGER, `src` TEXT);")
# main("CREATE TABLE Moders (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `moder_id` INTEGER, UNIQUE(moder_id));")
# main("CREATE TABLE Reactions (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `userid` INTEGER, `messageid` INTEGER, `flag` INTEGER);")
# main("DROP TABLE Reactions;")
# main("DELETE FROM Reactions;")
# main(f"INSERT INTO Moders (`moder_id`) VALUES ('806902493')")


TOKEN_BOT = '5729656929:AAHSxglQG-DeuNCWOlENB91H8usjvoAzkps'
bot = TeleBot(TOKEN_BOT)
MODER_IDS = main(f"SELECT moder_id FROM Moders;")

def menu(message):  
    bot.send_message(message.chat.id, '‚¨áÔ∏è<b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n</b>/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –º–µ—Å—Ç–µ\n\n/find - –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–º –º–µ—Å—Ç–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º\n\n/feedback - –û—Ç–∑—ã–≤—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–ù–∞—à–ª–∏ –±–∞–≥\n\n/help - –ü–æ–º–æ—â—å', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
    bot.register_next_step_handler(message, get_menu_mess)


def get_menu_mess(message):
    if message.content_type == 'text':
        if message.text == '/start':
                start(message)

        elif message.text == '/new':
            get_area(message)
        
        elif message.text == '/find':
            get_find_criterion(message)

        elif message.text == '/feedback':
            start_support(message)

        elif message.text == '/help':
            help(message)

        elif len(set(message.text.lower().split()) & set(["–∫–∞–∫", "–¥–µ–ª–∞"])) == 2:
            bot.send_message(message.chat.id, f'<b>{howareyou[random.randint(0, 3)]}</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
        elif len(set(message.text.lower().split()) & set(["—á—Ç–æ", "–¥–µ–ª–∞–µ—à—å"])) == 2:
            bot.send_message(message.chat.id, f'<b>{whatareudo[random.randint(0, 3)]}</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
        elif len(set(message.text.lower().split()) & set(["–∫–∞–∫", "—Ç–µ–±—è", "–∑–æ–≤—É—Ç"])) == 3:
            bot.send_message(message.chat.id, f'<b>{botname[random.randint(0, 2)]}</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
        elif len(set(message.text.lower().split()) & set(["–∫—Ç–æ", "—Ç—ã"])) == 2: 
            bot.send_message(message.chat.id, f'<b>{whoareu[random.randint(0, 1)]}</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ —Å–≤–æ—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–º–µ—Å—Ç–æ? –í–ø–µ—Ä—ë–¥!</b>\n\n–û—á–µ–Ω—å –∞–∫—Ç—É–∞–ª—å–Ω–æ —Å–µ–π—á–∞—Å –≤ —Å–≤—è–∑–∏ —Å –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤ –º–∏—Ä–µ –¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—é –æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—à–∏—Ö –∫—É—Ä–æ—Ä—Ç–æ–≤, –≥–æ—Ä–æ–¥–æ–≤.\n\n–ù–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏.\n\n–®–∏—Ä–æ–∫–∞—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –±–æ–≥–∞—Ç—Å—Ç–≤–æ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –¥–∞–µ—Ç –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è, –∑–Ω–∞–Ω–∏—è –∏ —ç–º–æ—Ü–∏–∏. –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–≥–æ–ª–∫–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞—à–µ–π –æ–≥—Ä–æ–º–Ω–æ–π –†–æ–¥–∏–Ω—ã.\n\n–ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å /help\n\n–ù–∞—à –∫–∞–Ω–∞–ª —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ –∏ –ø—Ä–æ—á–∏–º: https://t.me/LocalSight73', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
    menu(message)



@bot.message_handler(commands=['new'])
def get_area(message):
    bot.send_message(message.chat.id, '1Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ:</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
    bot.register_next_step_handler(message, get_year)


def get_year(message):
    if message.content_type == 'text':
        if check_words(message.text.lower()):
            if get_coords(message.text):
                bot.send_message(message.chat.id, '2Ô∏è‚É£ <b>–í –∫–∞–∫–æ–º –≥–æ–¥—É –í—ã –ø–æ—Å–µ—â–∞–ª–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–º–µ—Å—Ç–æ?</b>', reply_markup=kb_year, parse_mode="html")
                bot.register_next_step_handler(message, get_season, get_coords(message.text))
            else:
                bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥) –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ.</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                menu(message)
        elif message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
            menu(message)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å. –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    elif message.location is not None:
        coord = str(message.location.longitude) + ',' + str(message.location.latitude) 
        if get_adress(coord):
            bot.send_message(message.chat.id, '2Ô∏è‚É£ <b>–í –∫–∞–∫–æ–º –≥–æ–¥—É –í—ã –ø–æ—Å–µ—â–∞–ª–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–º–µ—Å—Ç–æ?</b>', reply_markup=kb_year, parse_mode="html")
            bot.register_next_step_handler(message, get_season, coord)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —ã–∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥).</b>', reply_markup=kb_year, parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑüìç<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def get_season(message, ms_area):
    if message.content_type == 'text':
        if message.text in ("2023", "2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015"):
            bot.send_message(message.chat.id, '3Ô∏è‚É£ <b>–í –∫–∞–∫–æ–º —Å–µ–∑–æ–Ω–µ –í—ã –ø–æ—Å–µ—â–∞–ª–∏ –µ—ë/–µ–≥–æ?</b>', reply_markup=kb_season, parse_mode="html")
            bot.register_next_step_handler(message, get_month, ms_area, message.text)
        elif message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '1Ô∏è‚É£ <b>–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–º–µ—Å—Ç–æ?</b>', reply_markup=kb_area, parse_mode="html")
            bot.register_next_step_handler(message, get_year)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def get_month(message, ms_area, ms_year):
    if message.content_type == 'text':
        if message.text.lower() in ("–∑–∏–º–∞", "–≤–µ—Å–Ω–∞", "–ª–µ—Ç–æ", "–æ—Å–µ–Ω—å"):
            bot.send_message(message.chat.id, '4Ô∏è‚É£ <b>–í –∫–∞–∫–æ–º –º–µ—Å—è—Ü–µ –í—ã –ø–æ—Å–µ—â–∞–ª–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–º–µ—Å—Ç–æ?</b>', reply_markup=set_month(message.text.lower()), parse_mode="html")
            bot.register_next_step_handler(message, get_description, ms_area, ms_year, message.text)
        elif message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '2Ô∏è‚É£ <b>–í –∫–∞–∫–æ–º –≥–æ–¥—É –í—ã –ø–æ—Å–µ—â–∞–ª–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–º–µ—Å—Ç–æ?</b>', reply_markup=kb_year, parse_mode="html")
            bot.register_next_step_handler(message, get_season, message.text)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def set_month(season):
    kb_mnh = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    if season == "–∑–∏–º–∞":
        for btn_winter in btns_winter:     
            kb_mnh.add(btn_winter)
    elif season == "–≤–µ—Å–Ω–∞":
        for btn_spring in btns_spring:     
            kb_mnh.add(btn_spring)
    elif season == "–ª–µ—Ç–æ":
        for btn_summer in btns_summer:     
            kb_mnh.add(btn_summer)
    elif season == "–æ—Å–µ–Ω—å":
        for btn_autumn in btns_autumn:     
            kb_mnh.add(btn_autumn)
    return kb_mnh
            

def get_description(message, ms_area, ms_year, ms_sesson):
    if message.content_type == 'text':
        if message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '3Ô∏è‚É£ <b>–í –∫–∞–∫–æ–º —Å–µ–∑–æ–Ω–µ –í—ã –ø–æ—Å–µ—â–∞–ª–∏ –µ—ë/–µ–≥–æ?</b>', reply_markup=kb_season, parse_mode="html")
            bot.register_next_step_handler(message, get_month, ms_area, message.text)
        elif message.text.lower() in ("–¥–µ–∫–∞–±—Ä—å", "—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å", "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å"):
            bot.send_message(message.chat.id, '5Ô∏è‚É£ <b>–û–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–º–µ—Å—Ç–æ: </b>\n<em>–ù–µ –º–µ–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤</em>\n<em>–¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è</em>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            bot.register_next_step_handler(message, get_feedback, ms_area, ms_year, ms_sesson, message.text)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def get_feedback(message, ms_area, ms_year, ms_sesson, ms_month):
    if message.content_type == 'text':
        if 100 <= len(message.text) <= 1000:
            if check_words(message.text.lower()):
                bot.send_message(message.chat.id, '6Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–µ–π/–Ω—ë–º: </b>\n<em>–ù–µ –º–µ–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤\n–¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è</em>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                bot.register_next_step_handler(message, get_mark, ms_area, ms_year, ms_sesson, ms_month, message.text)
            elif check_words(message.text.lower()) == 'forbidden_words':
                bot.send_message(message.chat.id, 'üôÅ<b>–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                menu(message)
            else:
                bot.send_message(message.chat.id, 'üôÅ<b>–¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                menu(message)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100 –∏ –Ω–µ –±–æ–ª–µ–µ 1000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def get_mark(message, ms_area, ms_year, ms_sesson, ms_month, ms_description):
    if message.content_type == 'text':
        if message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
                bot.send_message(message.chat.id, '5Ô∏è‚É£ <b>–û–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–º–µ—Å—Ç–æ: </b>\n<em>–ù–µ –º–µ–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤\n–¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è</em>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                bot.register_next_step_handler(message, get_feedback, ms_area, ms_year, ms_sesson, message.text)
        elif 50 <= len(message.text) <= 1000:
            if check_words(message.text.lower()):
                bot.send_message(message.chat.id, '7Ô∏è‚É£ <b>–í–∞—à–∞ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ </b>\n<em>–û—Ç 1 –¥–æ 10:</em>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                bot.register_next_step_handler(message, get_tags, ms_area, ms_year, ms_sesson, ms_month, ms_description, message.text)
            elif check_words(message.text.lower()) == 'forbidden_words':
                bot.send_message(message.chat.id, 'üôÅ<b>–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                menu(message) 
            else:
                bot.send_message(message.chat.id, 'üôÅ<b>–¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, —Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                menu(message)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 50 –∏ –Ω–µ –±–æ–ª–µ–µ 1000. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def get_tags(message, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback):
    if message.content_type == 'text':
        if message.text in ("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"):
            bot.send_message(message.chat.id, '8Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–∏–Ω —Ç–µ–≥ (–ß–µ—Ä–µ–∑ #), –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–∞–Ω–Ω–æ–º—É –º–µ—Å—Ç—É</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            bot.register_next_step_handler(message, choise_photo, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, message.text)
        elif message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '6Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–µ–π/–Ω—ë–º: </b>\n<em>–ù–µ –º–µ–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤</em>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            bot.register_next_step_handler(message, get_mark, ms_area, ms_year, ms_sesson, ms_month, message.text)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def choise_photo(message, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, ms_mark):
    if message.content_type == 'text':
        if '#' in message.text and len(message.text.replace('#', '')) >= 2 and check_words(message.text.replace('#', '').lower()) and message.text.lower().count('#') == 1:
            bot.send_message(message.chat.id,  '9Ô∏è‚É£ <b>–£ –≤–∞—Å –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —ç—Ç–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏/–º–µ—Å—Ç–∞?</b>', reply_markup=kb_y_n, parse_mode="html")
            bot.register_next_step_handler(message, choise_moder, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, ms_mark, message.text)
        elif message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '7Ô∏è‚É£ <b>–í–∞—à–∞ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ </b>\n<em>–û—Ç 1 –¥–æ 10:</em>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            bot.register_next_step_handler(message, get_tags, ms_area, ms_year, ms_sesson, ms_month, ms_description, message.text)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–°–ª–µ–¥—É–µ—Ç –ø–∏—Å–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–≥ —á–µ—Ä–µ–∑ "#" –∏ –¥–ª–∏–Ω–Ω–æ—é –Ω–µ –º–µ–Ω—å—à–µ 2 –∑–Ω–∞–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def choise_moder(message, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, ms_mark, ms_tags):
    if message.content_type == 'text':
        if message.text.lower() in ("‚úÖ–¥–∞", "–¥–∞"):
            bot.send_message(message.chat.id, 'üì∏<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é: </b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            bot.register_next_step_handler(message, get_photo, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, ms_mark, ms_tags)
        elif message.text.lower() in ("‚ùå–Ω–µ—Ç", "–Ω–µ—Ç"):     
            bot.send_message(message.chat.id, 'üì•<b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é?</b>', reply_markup=kb_y_n, parse_mode="html")
            bot.register_next_step_handler(message, insert_and_send, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, ms_mark, ms_tags)
        elif message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '8Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–∏–Ω —Ç–µ–≥ (–ß–µ—Ä–µ–∑ #), –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–∞–Ω–Ω–æ–º—É –º–µ—Å—Ç—É</b>\n<em></em>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            bot.register_next_step_handler(message, choise_photo, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, message.text)
        else:
            bot.send_message(message.chat.id, 'ü´¢<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=kb_y_n, parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def get_photo(message, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, ms_mark, ms_tags):
    try:
        Path(f'files/{message.chat.id}/').mkdir(parents = True, exist_ok = True) # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏

        if message.content_type == 'photo':              
            file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id) 
            downloaded_file = bot.download_file(file_info.file_path)
            src = f'files/{message.chat.id}/{datetime.datetime.now().strftime("%Y%m%d_%H%M")}{file_info.file_path.replace("photos/", "")}'
            bot.send_message(message.chat.id, 'üì•<b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é?</b>', reply_markup=kb_y_n, parse_mode="html")
          
            with open(src, 'wb') as new_file:   # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                new_file.write(downloaded_file)
            bot.register_next_step_handler(message, insert_and_send, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, ms_mark, ms_tags, src)
        else:
            bot.send_message(message.chat.id, 'ü´¢<b>–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ –ø—Ä–æ—á–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)

    except Exception as e:
        bot.send_message(message.chat.id, 'ü´¢<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)
        print(f'!!!{e}')


bot.message_handler(content_types=["text"])
def insert_and_send(message, ms_area, ms_year, ms_sesson, ms_month, ms_description, ms_feedback, ms_mark, ms_tags, src = False):
    if message.content_type == 'text':
        if message.text.lower() in ("‚úÖ–¥–∞", "–¥–∞"):
            bot.send_message(message.chat.id, 'üÜó <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤–Ω–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ. –ú—ã —É–≤–µ–¥–æ–≤–∏–º –≤–∞—Å, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–π–¥—É—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")  
            date = datatime.now().strftime("%d.%m.%Y") 
            for moder_id in MODER_IDS:
                if src:
                    main(f"INSERT INTO Sights (`area`, `year`, `season`, `month`, `description`, `feedback`, `mark`, `tags`, `date`, `userid`, `src`) VALUES ('{ms_area}', '{ms_year}', '{ms_sesson}', '{ms_month}', '{ms_description}', '{ms_feedback}', '{ms_mark}', '{ms_tags}', '{date}', '{message.from_user.id}', '{src}')")
                    dates_id = main(f"SELECT id FROM Sights WHERE area='{ms_area}' AND year='{ms_year}' AND season='{ms_sesson}' AND month='{ms_month}' AND description='{ms_description}' AND feedback='{ms_feedback}' AND mark='{ms_mark}' AND tags='{ms_tags}' AND userid='{message.from_user.id}' AND `src`='{src}';")
                    if dates_id:
                        bot.send_photo(moder_id[0], open(src,'rb'))
                        bot.send_location(moder_id[0], longitude=ms_area.split(',')[0], latitude=ms_area.split(',')[1])
                        bot.send_message(moder_id[0], f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {get_adress(ms_area)}\n\n<b>–ì–æ–¥:</b> {ms_year}\n\n<b>–°–µ–∑–æ–Ω:</b> {ms_sesson}\n\n<b>–ú–µ—Å—è—Ü:</b> {ms_month}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {ms_description}\n\n<b>–û—Ç–∑—ã–≤:</b> {ms_feedback}\n\n<b>–°—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {ms_mark}\n\n{ms_tags}", reply_markup = mod_markup(dates_id), parse_mode="html")
                    else:
                        bot.send_message(message.chat.id, 'ü´¢<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                        menu(message)
                        print("dates_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    main(f"INSERT INTO Sights (`area`, `year`, `season`, `month`, `description`, `feedback`, `mark`, `tags`, `date`, `userid`, `src`) VALUES ('{ms_area}', '{ms_year}', '{ms_sesson}', '{ms_month}', '{ms_description}', '{ms_feedback}', '{ms_mark}', '{ms_tags}', '{date}', '{message.from_user.id}', '0')")
                    dates_id = main(f"SELECT id FROM Sights WHERE area='{ms_area}' AND year='{ms_year}' AND season='{ms_sesson}' AND month='{ms_month}' AND description='{ms_description}' AND feedback='{ms_feedback}' AND mark='{ms_mark}' AND tags='{ms_tags}' AND userid='{message.from_user.id}' AND src='0';")
                    if dates_id:
                        bot.send_location(moder_id[0], longitude=ms_area.split(',')[0], latitude=ms_area.split(',')[1])
                        bot.send_message(moder_id[0], f"<b>–õ–æ–∫–∞—Ü–∏—è:</b> {get_adress(ms_area)}\n\n<b>–ì–æ–¥:</b> {ms_year}\n\n<b>–°–µ–∑–æ–Ω:</b> {ms_sesson}\n\n<b>–ú–µ—Å—è—Ü:</b> {ms_month}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {ms_description}\n\n<b>–û—Ç–∑—ã–≤:</b> {ms_feedback}\n\n<b>–°—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {ms_mark}\n\n{ms_tags}", reply_markup = mod_markup(dates_id), parse_mode="html")
                    else:
                        bot.send_message(message.chat.id, 'ü´¢<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                        menu(message)
                        print("dates_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        elif message.text.lower() in ("‚ùå–Ω–µ—Ç", "–Ω–µ—Ç"):
            bot.send_message(message.chat.id, 'üîú<b>–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            start(message)

        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)



@bot.message_handler(commands=['feedback'])
def start_support(message):
    bot.send_message(message.chat.id , '‚ÜòÔ∏è<b>–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<em>–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞</em>', parse_mode="html", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_support)


def get_support(message):
    bot.send_message(message.chat.id, 'üòá<b>C–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –º—ã —Ü–µ–Ω–∏–º —ç—Ç–æ!</b>', parse_mode="html")
    for moder_id in MODER_IDS:
        bot.send_message(moder_id[0], f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> @{message.from_user.username}", parse_mode="html", reply_markup=ReplyKeyboardRemove())
        bot.forward_message(moder_id[0], message.chat.id, message.message_id)



# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
def mod_markup(dates_id):
    markup_y_n = InlineKeyboardMarkup()
    markup_y_n.row_width = 2
    markup_y_n.add(InlineKeyboardButton("‚úÖ–ó–∞–ø–æ—Å—Ç–∏—Ç—å", callback_data=f"1 {dates_id[0][0]} Yes"), InlineKeyboardButton("‚ùå–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏–≤–æ–≤–∞—Ç—å", callback_data=f"1 {dates_id[0][0]} No"))
    return markup_y_n

def reaction_markup(postid):
    likes, dislikes = get_reactions_from_bd(postid)
    markup_reaction = InlineKeyboardMarkup()
    markup_reaction.row_width = 2
    markup_reaction.add(InlineKeyboardButton(f"üî• {likes}", callback_data=f"reaction {postid} 1"), InlineKeyboardButton(f"‚ùÑ {dislikes}", callback_data=f"reaction {postid} 0"))
    return markup_reaction

def get_reactions_from_bd(postid):
    flags = main(f'SELECT flag FROM Reactions WHERE messageid = "{postid}"') # [(1,), (1,), (1,)]
    sum_or_likes = 0
    for flag in flags:
        sum_or_likes += flag[0]
    dislike = len(flags) - sum_or_likes
    return [sum_or_likes, dislike]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ call_back
@bot.callback_query_handler(func=lambda call: True)
def get_call(call):
    call_data = call.data.split()
    if call_data[0] == '1':
        print(call_data)
        data = main(f"SELECT * FROM Sights WHERE `id`={call_data[1]}")
        area, year, season, month, description, feedback, mark, tags, src = data[0][1], data[0][2], data[0][3], data[0][4], data[0][5], data[0][6], data[0][7], data[0][8], data[0][11]
        for moder_id in MODER_IDS:
            if call_data[2] == "Yes":
                if src != '0':
                    bot.send_photo(-1001701836271, open(src, 'rb'))
                bot.send_location(-1001701836271, longitude=area.split(',')[0], latitude=area.split(',')[1])
                bot.send_message(-1001701836271, f"<b>üè¢–†–∞–π–æ–Ω: </b> {get_adress(area)}\n\n<b>‚è≥–ì–æ–¥: </b> {year}\n\n<b>üèùÔ∏è–°–µ–∑–æ–Ω: </b> {season}\n\n<b>üìÖ–ú–µ—Å—è—Ü: </b> {month}\n\n<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ: </b> {description}\n\n<b>üìà–û—Ç–∑—ã–≤: </b> {feedback}\n\n<b>üåü–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </b> {mark}\n\n{tags}", parse_mode="html")
                bot.send_message(moder_id[0], "‚úÖ<b>–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</b>", reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                bot.send_message(data[0][10], '‚úÖ<b>–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                bot.answer_callback_query(call.id, "OK, POST PUBLISHED")

            elif call_data[2] == "No":
                bot.send_message(data[0][10], '‚ùå<b>–ü—Ä–æ—Å—Ç–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É</b>', parse_mode="html")
                bot.send_message(moder_id[0], "‚ùå<b>–ü–æ—Å—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω</b>", reply_markup=ReplyKeyboardRemove(), parse_mode="html")
                main(f"DELETE FROM Sights WHERE `id` = {call_data[1]};")
                bot.answer_callback_query(call.id, "OK, POST IGNORED")
            
    
    if call_data[0] == 'reaction':   #  ['reaction', '1', '1']     
        userid_to_check = main(f"SELECT userid, messageid, flag FROM Reactions WHERE messageid = '{call_data[1]}' AND userid = '{call.message.chat.id}'")
        if userid_to_check:
            if tuple([call.message.chat.id, int(call_data[1])]) == userid_to_check[0][:2]: # —Å—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–∞—Ä—ã userid - messageid
                bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–∞–∫—Ü–∏—é!")
                 
        else:
            bot.edit_message_reply_markup(chat_id = call.message.chat.id, message_id=call.message.message_id, reply_markup = recreation_markup_plus(call_data[1], call_data[2]))
            main(f"INSERT INTO Reactions (`userid`, `messageid`, `flag`) VALUES ('{call.message.chat.id}', '{call_data[1]}', '{call_data[2]}')")      
            if call_data[2] == "1":  
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="LIKE")
            elif call_data[2] == "0":
                bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="DISLIKE")
            else:
                bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")


def recreation_markup_plus(postid, flag):
    likes, dislikes = get_reactions_from_bd(postid)
    if likes >= 0 and dislikes >= 0:
        recreation_markup_reaction = InlineKeyboardMarkup()
        if flag == '1':
            recreation_markup_reaction.row(InlineKeyboardButton(f"üî• {likes + 1}", callback_data=f"reaction {postid} 1"), InlineKeyboardButton(f"‚ùÑ {dislikes}", callback_data=f"reaction {postid} 0"))
        elif flag == '0':
            recreation_markup_reaction.row(InlineKeyboardButton(f"üî• {likes}", callback_data=f"reaction {postid} 1"), InlineKeyboardButton(f"‚ùÑ {dislikes + 1}", callback_data=f"reaction {postid} 0"))
        else:
            print('Error recreation_markup_plus')
        return recreation_markup_reaction
    else:
        print('–ö–æ–ª-–≤–æ –ª–∞–π–∫–æ–≤ –º–µ–Ω—å—à–µ 0')
        return recreation_markup_reaction.row(InlineKeyboardButton(f"üî• {likes}", callback_data=f"reaction {postid} 1"), InlineKeyboardButton(f"‚ùÑ {dislikes}", callback_data=f"reaction {postid} 0"))
        


@bot.message_handler(commands=['find'])
def get_find_criterion(message): 
    bot.send_message(message.chat.id, 'üîç<b>–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ —á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ</b>', reply_markup=kb_criterion, parse_mode="html")
    bot.register_next_step_handler(message, processing_criterion)


def processing_criterion(message):
    if message.content_type == 'text':
        if message.text.lower() in ("–¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", "üìÜ –¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"):
            bot.send_message(message.chat.id , 'üìÜ<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì</b>\n<em>–ò–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì</em>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            bot.register_next_step_handler(message, for_date)
        elif message.text.lower() in ("–æ—Ü–µ–Ω–∫–∞", "üåü –æ—Ü–µ–Ω–∫–∞"):
            bot.send_message(message.chat.id , 'üåü<b>–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —á–∏—Å–µ–ª</b>\n<em>–ß–µ—Ä–µ–∑ "-"</em>\n<em>–û—Ç 1 –¥–æ 10:</em>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            bot.register_next_step_handler(message, for_mark)
        elif message.text.lower() in ("—Ç–µ–≥", "#‚É£ —Ç–µ–≥"):
            bot.send_message(message.chat.id , '#‚É£<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–≥ —á–µ—Ä–µ–∑ "#"</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            bot.register_next_step_handler(message, for_tag)
        elif message.text.lower() in ("–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ", "üî• –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ"):
            for_popularity(message)
        elif message.text.lower() in ("—Å–ª—É—á–∞–π–Ω–æ", "üé≤ —Å–ª—É—á–∞–π–Ω–æ"):
            for_random(message)
        elif message.text.lower() == "üîô –Ω–∞–∑–∞–¥":
            menu(message)
        else:
            bot.send_message(message.chat.id , 'üôÅ<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def send_posts(message, posts): # –î–æ–±–∞–≤–∏—Ç—å 10 –º–µ—Å—Ç (–ø–æ–∫–∞ —á—Ç–æ –ø–æ 1)  
    if posts:
        for post in posts[:1]: # [:5]
            print("photo save path:", post[9])
            if post[9] != '0':
                bot.send_photo(message.chat.id, open(post[9], 'rb'))
            bot.send_location(message.chat.id, longitude=post[1].split(',')[0], latitude=post[1].split(',')[1])
            send_post = ''
            check_post = {
                'area': f'<b>üè¢–†–∞–π–æ–Ω: </b> {get_adress(post[1])}',
                'year': f'\n\n<b>‚è≥–ì–æ–¥: </b> {post[2]}',
                'season': f'\n\n<b>üèùÔ∏è–°–µ–∑–æ–Ω: </b> {post[3]}',
                'month': f'\n\n<b>üìÖ–ú–µ—Å—è—Ü: </b> {post[4]}',
                'description': f'\n\n<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ: </b> {post[5]}',
                'feedback': f'\n\n<b>üìà–û—Ç–∑—ã–≤: </b> {post[6]}',
                'mark': f'\n\n<b>üåü–û—Ü–µ–Ω–∫–∞: </b> {post[7]}',
                'tags': f'\n\n{post[8]}'
            }
            for el in check_post:
                if check_post[el].split()[-1] != 'None':
                    send_post += check_post[el]

            bot.send_message(message.chat.id, send_post, reply_markup = reaction_markup(post[0]), parse_mode="html")
            posts.remove(posts[0]) # [x:]
            bot.send_message(message.chat.id , 'üîÑ<b>–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ?</b>', reply_markup=kb_y_n, parse_mode="html")
            bot.register_next_step_handler(message, get_answer_to_send, posts)
    else:
        bot.send_message(message.chat.id , 'üîö<b>–ó–∞–ø–∏—Å–µ–π –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def get_answer_to_send(message, posts):
    if message.content_type == 'text':
        if message.text.lower() in ("‚úÖ–¥–∞", "–¥–∞"):
            send_posts(message, posts)
        elif message.text.lower() in ("‚ùå–Ω–µ—Ç", "–Ω–µ—Ç"):
            bot.send_message(message.chat.id , 'üòä<b>–ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–∞—à–ª–∏ –º–µ—Å—Ç–æ –ø–æ –¥—É—à–µ</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
        else: 
            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def for_popularity(message):
    if message.content_type == 'text':
        posts = most_popular_sights()
        send_posts(message, posts)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def for_random(message):
    if message.content_type == 'text':
        all_sights = main(f'SELECT id, area, year, season, month, description, feedback, mark, tags, src FROM Sights')
        posts = random.sample(all_sights, len(all_sights))
        send_posts(message, posts)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def for_tag(message):
    if message.content_type == 'text':
        if '#' in message.text.lower() and len(message.text.lower().replace('#', '')) > 1 and check_words(message.text.lower().replace('#', '')):
            posts = main(f'SELECT id, area, year, season, month, description, feedback, mark, tags, src FROM Sights WHERE tags LIKE "%{message.text.lower()}%"')
            send_posts(message, posts)
        elif message.text.lower() == "–Ω–∞–∑–∞–¥":
            processing_criterion(message)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–°–ª–µ–¥—É–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–µ–≥ —á–µ—Ä–µ–∑ "#" –∏ –¥–ª–∏–Ω–Ω–æ—é –Ω–µ –º–µ–Ω—å—à–µ 2 –∑–Ω–∞–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã</b>', parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def for_mark(message):
    if message.content_type == 'text':
        if message.text.lower() == "–Ω–∞–∑–∞–¥":
            processing_criterion(message)
        elif "-" in message.text:
            if message.text.split('-')[0] in ("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"):
                if message.text.split('-')[1] in ("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"):
                    mark_first = message.text.split('-')[0]
                    mark_second = message.text.split('-')[1]
                    posts = main(f'SELECT id, area, year, season, month, description, feedback, mark, tags, src FROM Sights WHERE mark >= "{mark_first}" AND date <= "{mark_second}"')
                    send_posts(message, posts)
                else:
                    bot.send_message(message.chat.id, 'üôÅ<b>–°–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ "-". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', parse_mode="html")
                    menu(message)
            else:
                bot.send_message(message.chat.id, 'üôÅ<b>–°–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ "-". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', parse_mode="html")
                menu(message)
        elif message.text in ("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"):
            posts = main(f'SELECT id, area, year, season, month, description, feedback, mark, tags, src FROM Sights WHERE mark LIKE "{message.text}"')
            send_posts(message, posts)
        else:
            bot.send_message(message.chat.id, 'üôÅ<b>–°–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ "-". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', parse_mode="html")
            menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)


def for_date(message):
    if message.content_type == 'text':
        if message.text.lower() == "–Ω–∞–∑–∞–¥":
            processing_criterion(message)
        else:
            for i in message.text.split():
                if '.' in i:               
                    dates = i.split('-') 
                    if len(dates) == 1:
                        ms_date_part = is_date(dates[0])
                        if ms_date_part:
                            posts = main(f'SELECT id, area, year, season, month, description, feedback, mark, tags, src FROM Sights WHERE date LIKE "%{ms_date_part}%"') # [(), (), ()]
                            send_posts(message, posts)
                        else:
                            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É/–¥–∞—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', parse_mode="html")
                            menu(message)
                    elif len(dates) == 2:
                        ms_date_part1 = is_date(dates[0])
                        ms_date_part2 = is_date(dates[1])
                        if ms_date_part1 and ms_date_part2:
                            posts = main(f'SELECT id, area, year, season, month, description, feedback, mark, tags, src FROM Sights WHERE date >= "{ms_date_part1}" AND date <= "{ms_date_part2}"')
                            send_posts(message, posts)   
                        else:
                            bot.send_message(message.chat.id, 'üôÅ<b>–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É/–¥–∞—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', parse_mode="html")
                            menu(message)
                else:
                    bot.send_message(message.chat.id, 'üôÅ<b>–°–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', parse_mode="html")
                    menu(message)
    else:
        bot.send_message(message.chat.id, 'üìÑ<b>–°–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>', reply_markup=ReplyKeyboardRemove(), parse_mode="html")
        menu(message)



@bot.message_handler(commands=['help'])
def help(message): 
    bot.send_message(message.chat.id, help_answer, parse_mode="html")
    bot.register_next_step_handler(message, get_menu_mess)


while True:
    try:
        bot.polling(none_stop=True, timeout=90)
    except Exception as e:
        print(datetime.datetime.now(), e)
        time.sleep(5)
        continue